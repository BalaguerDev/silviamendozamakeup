---
import "../../styles/ContactForm.css";
---

<h2>
  ¡Compárteme los detalles de tu boda!
</h2>

<form id="contact-form" class="contact-form">
  <input type="text" id="name" name="name" placeholder="Nombre" required />
  <input
    type="number"
    id="phone"
    name="phone"
    placeholder="Teléfono"
    required
  />
  <input type="email" id="email" name="email" placeholder="Email" required />
  <span class="date-label">Fecha y lugar de la boda</span>
  <div class="date-container-time">
    <input
      type="date"
      id="date"
      name="date"
      min="2025-01-01"
      max="2100-12-31"
      required
    />
    <input
      type="time"
      id="hour"
      name="hour"
      placeholder="Hora de la ceremonia"
    />
  </div>
  <div class="date-container-time">
    <input
      type="text"
      id="place"
      name="place"
      placeholder="Lugar del enlace"
      required
    />
  </div>
  <textarea
    id="details"
    name="details"
    rows="4"
    placeholder="¿Quieres contarme algo que te inquiete?"
    required></textarea>
  <label>
    <input type="checkbox" name="privacy_policy" required />
    <p>
      He leído y acepto la <a href="/politica-de-privacidad" target="_blank"
        >Política de Privacidad</a
      >.
    </p>
  </label>
  <button type="submit" class="button primary">Enviar</button>
  <p id="form-message" style="display: none;"></p>
</form>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const contactForm = document.getElementById(
      "contact-form",
    )! as HTMLFormElement;
    const formMessage = document.getElementById(
      "form-message",
    )! as HTMLParagraphElement;

    contactForm.addEventListener("submit", async (e) => {
      e.preventDefault();

      const name = (
        document.getElementById("name")! as HTMLInputElement
      ).value.trim();
      const phone = (
        document.getElementById("phone")! as HTMLInputElement
      ).value.trim();
      const email = (
        document.getElementById("email")! as HTMLInputElement
      ).value.trim();
      const date = (
        document.getElementById("date")! as HTMLInputElement
      ).value.trim();
      let hour = (
        document.getElementById("hour")! as HTMLInputElement
      ).value.trim();

      const place = (
        document.getElementById("place")! as HTMLInputElement
      ).value.trim();
      const details = (
        document.getElementById("details")! as HTMLTextAreaElement
      ).value.trim();
      const consent = (
        document.querySelector(
          'input[name="privacy_policy"]',
        )! as HTMLInputElement
      ).checked;

      // Validaciones
      if (!/^[0-9]{9}$/.test(phone)) {
        alert("El teléfono debe contener 9 dígitos.");
        return;
      }

      if (hour) {
        hour = `${hour}:00.000`; // Aquí la reasignación debería funcionar correctamente si 'hour' es 'let'
      }

      const formData = {
        name,
        phone,
        email,
        date,
        hour,
        place,
        details,
        consent,
      };

      try {
        const response = await fetch(
          "http://localhost:1337/api/bride-form-contacts",
          {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ data: formData }),
          },
        );

        if (response.ok) {
          formMessage.textContent =
            "Muchas gracias por contactarnos ❤️, nos pondremos en contacto contigo en las próximas 24h";
          formMessage.style.color = "green";
          formMessage.style.display = "block";
          contactForm.reset();
        } else {
          const errorData = await response.json();
          formMessage.textContent = `Error: ${errorData.error.message || "Error al enviar el formulario"}`;
          formMessage.style.color = "red";
          formMessage.style.display = "block";
        }
      } catch (error) {
        formMessage.textContent = "Error en la conexión con el servidor.";
        formMessage.style.color = "red";
        formMessage.style.display = "block";
      }
    });
  });
</script>
